
gitignore="{{GITIGNORE}}"
usage="{{USAGE}}"
rebarconfig="{{REBAR}}"
package="{{PACKAGE}}"
commonmk="{{COMMONMK}}"
otpmk="{{OTPMK}}"
yawsmk="{{YAWSMK}}"
libmakefile="{{LIBMAKEFILE}}"
svcmakefile="{{SVCMAKEFILE}}"
travisci="{{TRAVISCI}}"
readme="{{README}}"
scriptfile="{{SCRIPTFILE}}"
libappsrc="{{LIBAPPSRC}}"
libtestmodule="{{LIBTESTMODULE}}"
libmodule="{{LIBMODULE}}"
libutilmodule="{{LIBUTILMODULE}}"
svcappsrc="{{SVCAPPSRC}}"
svctestmodule="{{SVCTESTMODULE}}"
svcapp="{{SVCAPP}}"
svcserver="{{SVCSERVER}}"
svcsup="{{SVCSUP}}"
e2makefile="{{E2MAKEFILE}}"
e2mk="{{E2MK}}"
e2rebar="{{E2REBAR}}"
e2appsrc="{{E2APPSRC}}"
e2testmodule="{{E2TESTMODULE}}"
e2app="{{E2APP}}"
e2server="{{E2SERVER}}"
yawsmakefile="{{YAWSMAKEFILE}}"
yawsrebar="{{YAWSREBAR}}"
yawsconf="{{YAWSCONF}}"
yawsmodule="{{YAWSMODULE}}"
yawsroutesmodule="{{YAWSROUTESMODULE}}"
yawscontentmodule="{{YAWSCONTENTMODULE}}"
yawsutilmodule="{{YAWSUTILMODULE}}"
yawsbootstrapcontentmodule="{{YAWSBOOTSTRAPCONTENTMODULE}}"
yawsbootstrapnavmodule="{{YAWSBOOTSTRAPNAVMODULE}}"
yawsbootstraproutesmodule="{{YAWSBOOTSTRAPROUTESMODULE}}"
yawsbootstrapcss="{{YAWSBOOTSTRAPCSS}}"
yawsbootstrapcssmin="{{YAWSBOOTSTRAPCSSMIN}}"
yawsbootstrapslatecss="{{YAWSBOOTSTRAPCSSSLATE}}"
yawsbootstrapslatecssmin="{{YAWSBOOTSTRAPCSSMINSLATE}}"
yawsbootstrapjs="{{YAWSBOOTSTRAPJS}}"
yawsbootstrapjsmin="{{YAWSBOOTSTRAPJSMIN}}"
yawsbootstrapfonteot="{{YAWSBOOTSTRAPFONTEOT}}"
yawsbootstrapfontsvg="{{YAWSBOOTSTRAPFONTSVG}}"
yawsbootstrapfontttf="{{YAWSBOOTSTRAPFONTTTF}}"
yawsbootstrapfontwoff="{{YAWSBOOTSTRAPFONTWOFF}}"
presrebar="{{PRESREBAR}}"
presyawsconf="{{PRESYAWSCONF}}"
presmodule="{{PRESMODULE}}"
prescontentmodule="{{PRESCONTENTMODULE}}"
presslidesmodule="{{PRESSLIDESMODULE}}"

unalias ls 2>/dev/null

# General Constants
DEPS=./deps
TEST_DIR=./test
TEST_OUT_DIR=./.eunit
# unit tests with meck don't seem to play well with parallel tests enabled
#CASE_OPEN="case eunit:test({inparallel,["
#CASE_CLOSE="]},[verbose]) of ok -> halt(0); _ -> halt(127) end"
CASE_OPEN="case eunit:test(["
CASE_CLOSE="],[verbose]) of ok -> halt(0); _ -> halt(127) end"
LFE_REPO=https://github.com/rvirding/lfe.git
LUTIL_REPO=https://github.com/lfex/lutil.git
LTEST_REPO=https://github.com/lfex/ltest.git
LCFG_REPO=https://github.com/lfex/lcfg.git
GLOBAL_LFE_DIR=~/.lfe
BOOTSTRAP_LFE_DIR=$GLOBAL_LFE_DIR/lfe
BOOTSTRAP_LFE=$BOOTSTRAP_LFE_DIR/bin/lfe
BOOTSTRAP_LFEC=$BOOTSTRAP_LFE_DIR/bin/lfec
BOOTSTRAP_DEPS_DIR=$GLOBAL_LFE_DIR/libs

# Terminal Colors
BLACK="\033[0;30;40m"
RED="\033[0;31;40m"
GREEN="\033[0;32;40m"
YELLOW="\033[0;33;40m"
BLUE="\033[0;34;40m"
MAGENTA="\033[0;35;40m"
CYAN="\033[0;36;40m"
WHITE="\033[0;37;40m"
BOLD_BLACK="\033[1;30;40m"
BOLD_RED="\033[1;31;40m"
BOLD_GREEN="\033[1;32;40m"
BOLD_YELLOW="\033[1;33;40m"
BOLD_BLUE="\033[1;34;40m"
BOLD_MAGENTA="\033[1;35;40m"
BOLD_CYAN="\033[1;36;40m"
BOLD_WHITE="\033[1;37;40m"
END_COLOR="\033[m"

# OS Type
OS_TYPE=Unix
case `uname -s` in
    CYGWIN_NT*)
        OS_TYPE=Cygwin
        ;;
    Windows_NT)
        OS_TYPE=Windows
        ;;
    SunOS)
        case `uname -r` in
            4*) OS_TYPE=SUNBSD ;;
            5*) OS_TYPE=SOLARIS ;;
        esac
        ;;
    Linux)
        OS_TYPE=LINUX
        ;;
    Darwin)
        OS_TYPE=Darwin  # Apple OS X
        ;;
    AIX)
        OS_TYPE=AIX
        ;;
    HP-UX)
        OS_TYPE=HP-UX
        ;;
    OSF1)
        OS_TYPE=OSF1
        ;;

    *)
        ;;
esac

system_type () {
    case $(uname -s) in
        AIX)   print AIX ;;
        HP-UX) print HP-UX ;;
        SunOS)
            case $(uname -r) in
                4*) print SUNBSD ;;
                5*) print SOLARIS ;;
            esac
            ;;
        Linux) print LINUX ;;
        Windows_NT) print WINDOWS ;;
        CYGWIN_NT*) print WINDOWS ;;
        IRIX ) print SGI ;;
        OSF1 ) print DECOSF ;;
        ULTRIX ) print ULTRIX ;;
        *) print UNKNOWN ;;
    esac
}

expr_cmd=expr
if [ $OS_TYPE = SOLARIS ]; then
    expr_cmd=/usr/ucb/expr      # for commands substr, index, etc
fi

abspath () {
  path=$1
  (cd $(dirname $path)
   echo $PWD/$(basename $path))
}

# echon -- echo with no trailing newline
echon () {
    if [ $OS_TYPE = Cygwin ] || [ $OS_TYPE = LINUX ]; then
        echo -n "$*"
    elif [ -x /usr/ucb/echo ] ; then
        /usr/ucb/echo -n "$*"
    elif [ -x /bin/echo ] ; then
        /bin/echo "$*\\c"
    elif [ -x /usr/bin/echo ] ; then
        /usr/bin/echo "$*\\c"
    else # we give up and allow a trailing newline
        echo "$*"
    fi
}

echoe () {
    case $OS_TYPE in
        LINUX|Cygwin|Darwin)
            echo -e "$*"
            ;;
        *)
            echo "$*"
            ;;
    esac
}

decode () {
    case $OS_TYPE in
        Darwin)
            base64 -D
            ;;
        LINUX|Cygwin)
            base64 -d
            ;;
        *)
            base64 -d
            ;;
    esac
}

print_usage () {
    fullpath=$1
    version=$2
    script=`basename $fullpath`
    echo "$usage" | decode | sed \
        -e "s#{{SCRIPT}}#$script#g" \
        -e "s#{{FULLPATH}}#$fullpath#g" \
        -e "s#{{VERSION}}#$version#g"
}

error () {
    message=$1
    echo
    echo $message
    echo
    print_usage $script
    exit 1
}

unknown_command_error () {
    command=$1
    error "Unknown command: '$command'";
}

unknown_subcommand_error () {
    command=$1
    subcommand=$2
    error "Unknown subcommand for '$command': '$subcommand'";
}

unknown_context_error () {
    context=$1
    error "Unknown context: '$context'";
}

missing_context_error () {
    error "Error: command requires context"
}

missing_arg_error () {
    error "Error: context requires arg"
}

not_implemented_error () {
    error "Error: not yet implemented"
}

lfetool_not_found_error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

clone_repo () {
    url=$1
    path=$2
    git clone --depth 1 $url $path
}

bootstrap_lfe () {
    if [ ! -d $BOOTSTRAP_LFE_DIR ] ; then
        mkdir -p $BOOTSTRAP_DEPS_DIR
        echo "Bootstrapping LFE to $BOOTSTRAP_LFE_DIR ..."
        clone_repo $LFE_REPO $BOOTSTRAP_LFE_DIR 1> /dev/null
        cd $BOOTSTRAP_LFE_DIR && \
        make compile
    fi
}

bootstrap_lutil () {
    BOOT_DIR=$BOOTSTRAP_DEPS_DIR/lutil
    if [ ! -d $BOOT_DIR ] ; then
        echo "Bootstrapping lutil to $BOOT_DIR ..."
        clone_repo $LUTIL_REPO $BOOT_DIR 1> /dev/null
        export PATH=$BOOTSTRAP_LFE_DIR/bin:$PATH
        export ERL_LIBS=`get_bootstrap_erl_libs`
        cd $BOOT_DIR && \
        ln -s $BOOTSTRAP_LFE_DIR $BOOTSTRAP_DEPS_DIR || \
        echo "LFE already symlinked ... " && \
        mkdir -p ebin && cd ebin && \
        $BOOTSTRAP_LFEC $BOOT_DIR/src/*.lfe
        cp $BOOT_DIR/src/lutil.app.src $BOOT_DIR/ebin/lutil.app
    fi
}

bootstrap_ltest () {
    BOOT_DIR=$BOOTSTRAP_DEPS_DIR/ltest
    if [ ! -d $BOOT_DIR ] ; then
        echo "Bootstrapping ltest to $BOOT_DIR ..."
        clone_repo $LTEST_REPO $BOOT_DIR 1> /dev/null
        export PATH=$BOOTSTRAP_LFE_DIR/bin:$PATH
        export ERL_LIBS=`get_bootstrap_erl_libs`
        cd $BOOT_DIR && \
        ln -s $BOOTSTRAP_LFE_DIR $BOOTSTRAP_DEPS_DIR || \
        echo "LFE already symlinked ... " && \
        mkdir -p ebin && cd ebin && \
        $BOOTSTRAP_LFEC $BOOT_DIR/src/*.lfe
        cp $BOOT_DIR/src/ltest.app.src $BOOT_DIR/ebin/ltest.app
    fi
}

bootstrap_lcfg () {
    BOOT_DIR=$BOOTSTRAP_DEPS_DIR/lcfg
    if [ ! -d $BOOT_DIR ] ; then
        echo "Bootstrapping lcfg to $BOOT_DIR ..."
        clone_repo $LCFG_REPO $BOOT_DIR 1> /dev/null
        export PATH=$BOOTSTRAP_LFE_DIR/bin:$PATH
        export ERL_LIBS=`get_bootstrap_erl_libs`
        cd $BOOT_DIR && \
        ln -s $BOOTSTRAP_LFE_DIR $BOOTSTRAP_DEPS_DIR || \
        echo "LFE already symlinked ..." && \
        mkdir -p ebin && cd ebin && \
        $BOOTSTRAP_LFEC $BOOT_DIR/src/*.lfe
        cp $BOOT_DIR/src/lcfg.app.src $BOOT_DIR/ebin/lcfg.app
    fi
}

download_file () {
    url=$1
    echo "Downloading $url ..."
    curl -L -O "$url" > /dev/null 2>&1 && \
    echo "Download succeeded." || \
    echo "Download failed."
}

get_erl_install_dir () {
    erl -eval 'io:fwrite(re:replace(code:lib_dir(), "~", "~~", [global, {return,list}])), halt().' -run init stop -noshell
}

get_erl_bin_dir () {
    installdir=`get_erl_install_dir`
    basedir=`dirname $installdir`
    echo "$basedir/bin"
}

install_file () {
    src=$1
    directory=$2
    mode=$3
    msg=""
    if [ x"$directory" = x ]; then
        directory=/usr/local/bin
    fi
    chmod 755 $src
    if [ x"$mode" = x ]; then
        echo
        success="Installed $src to $directory."
        failure="Failed to install $src."
    else
        success="Updated ${directory}/${src}."
        failure="Update failed."
    fi
    mv $src $directory && echo $success || echo $failure
}

install_lfetool () {
    script=$1
    directory=$2
    mode=$3
    if [ x"$directory" = x ]; then
        directory=/usr/local/bin
    fi
    if [ x"$mode" = x ]; then
        cp $script $directory
        if [ $? -ne 0 ]; then
            echo cp $script $directory failed.
            exit 1
        fi
        chmod 755 $directory/`basename $script`
        eval "${directory}/`basename $script` -x"
        echo
        echo "Installed lfetool to $directory."
    elif [ $mode = update ]; then
        url="https://raw.githubusercontent.com/lfe/lfetool/stable/lfetool"
        file=lfetool
        cd /tmp/ > /dev/null 2>&1 && \
        download_file $url #&& \
        install_file $file $directory $mode && \
        cd - > /dev/null 2>&1
        eval "${directory}/${file} -x"
    fi
}

install_lfe () {
    directory=$1
    url="https://github.com/rvirding/lfe.git"
    repo=lfe
    file=$repo
    startdir=`pwd`
    cd /tmp/ > /dev/null 2>&1 && \
    clone_repo $url && \
    cd $repo && make compile && \
    ERL_LIBS=`get_erl_install_dir` make install && \
    cd .. > /dev/null 2>&1 && \
    rm -rf $repo && \
    cd startdir > /dev/null 2>&1
}

install_erlang () {
    release=$1
    directory=$2
    if [ x"$directory" = x ]; then
        directory=/opt/erlang/$release
    fi
    kerl build $1 $1 && \
    kerl install $release $directory && \
    echo "Installed Erlang." || echo "Failed to install Erlang."
}

install_kerl () {
    directory=$1
    if [ x"$directory" = x ]; then
        directory=/usr/local/bin
    fi
    url="https://raw.github.com/spawngrid/kerl/master/kerl"
    file=kerl
    cd /tmp/ > /dev/null 2>&1 && \
    download_file $url && \
    install_file $file $directory && \
    cd - > /dev/null 2>&1
}

install_rebar () {
    directory=$1
    if [ x"$directory" = x ]; then
        directory=`get_erl_bin_dir`
    fi
    url="https://github.com/rebar/rebar.git"
    repo=rebar
    file=$repo
    clone_repo $url
    cd $repo && make && \
    install_file $file $directory && \
    cd - > /dev/null 2>&1
}

install_relx () {
    directory=$1
    if [ x"$directory" = x ]; then
        directory=/usr/local/bin
    fi
    url="https://github.com/erlware/relx.git"
    repo=relx
    file=$repo
    clone_repo $url
    cd $repo && make && \
    install_file $file $directory && \
    cd - > /dev/null 2>&1
}

install_mix () {
    directory=$1
    if [ x"$directory" = x ]; then
        directory=/usr/local/bin
    fi
    url="http://s3.hex.pm/builds/mix/mix"
    file=mix
    cd /tmp > /dev/null 2>&1 && \
    download_file $url && \
    install_file $file $directory && \
    cd - > /dev/null 2>&1
}

install_erjang () {
    directory=$1
    if [ x"$directory" = x ]; then
        directory=/opt/erlang
    fi
    mkdir -p $directory
    url=https://github.com/trifork/erjang.git
    repo=erjang
    file=$repo
    startdir=`pwd`
    cd /tmp/ > /dev/null 2>&1 && \
    clone_repo $url && \
    cd $repo && ant alljar && \
    cd .. > /dev/null 2>&1 && \
    mv -v $repo $directory && \
    cd $startdir > /dev/null 2>&1
}

_install_autocomplete () {
    directory="${HOME}/.lfetool/"
    file="bash-complete"
    url="https://raw.githubusercontent.com/lfe/lfetool/stable/$file"
    mkdir -p $directory
    cd /tmp > /dev/null 2>&1 && \
    download_file $url && \
    install_file $file $directory \
    cd - > /dev/null 2>&1
}

install_autocomplete () {
    _install_autocomplete
    echo
    echo "The lfetool autocomplete file has been created. To use, simply"
    echo "update your ~/.bashrc, ~/.bash_profile, or ~/.profile to include the"
    echo "following line:"
    echo
    echo "    source ${directory}${file}"
    echo
    echo "(Alternatively, you may execute that from the command line for"
    echo "temporary use.)"
    echo
}

update_lfetool () {
    script=$1
    lfetoolpath=`which lfetool`
    if [ x"$lfetoolpath" = x ]; then
        lfetool_not_found_error
    fi
    directory=`dirname $lfetoolpath`
    echon "Current version: "
    lfetool -v
    install_lfetool $script $directory update
    echon "New version: "
    lfetool -v
    echo
    _install_autocomplete
    echo "Updated lfetool autocompletion file at ~/.lfetool/bash-complete."
}

update_deps () {
    echo "Updating dependencies ..."
    for DIR in ${DEPS}/*; do
        cd $DIR
        echo
        echoe "\tUpdating $DIR ..."
        echo
        git pull
        cd - > /dev/null 2>&1
    done
}

get_path () {
    echo ${DEPS}/lfe/bin:/opt/erlang/erjang:$PATH
}

get_bootstrap_erl_libs () {
    echo `abspath $BOOTSTRAP_LFE_DIR`:$ERL_LIBS:`find $BOOTSTRAP_DEPS_DIR -maxdepth 1 -exec printf "%s:" {} \;`
}

get_local_erl_libs () {
    find $DEPS -maxdepth 1 -exec printf "%s:" {} \; | sed "s#\(.*$\)#\1$TEST_OUT_DIR:.#"
}

get_erl_libs () {
    echo $ERL_LIBS:`get_local_erl_libs`:`get_bootstrap_erl_libs`
}

construct_pa_ebin_option() {
    #echo $DEPS/*/ebin | tr ' ' '\n' | awk '{printf("-pa %s ", $1)} END{print "-pa ./ebin -pa .eunit"}'
    echo {$DEPS/*,.,..,../$(basename `pwd`)}/ebin | tr ' ' '\n' | awk '{printf("-pa %s ", $1)} END{print "-pa .eunit"}'
}

get_versions () {
    echo
    echo "Getting version info ..."
    echo
    APP_SRC=`ls src/*app.src`
    PART1='{ok,[App]}=file:consult("'
    PART2='"),V=proplists:get_value(vsn,element(3,App)),'
    PART3='io:format("~p~n",[V])'
    COMMAND=${PART1}${APP_SRC}${PART2}${PART3}
    echon app.src: ''
    erl -eval "$COMMAND" -run init stop -noshell
    echon git tags: ''
    echo \"`git tag | tail -1`\"
}

download_deps () {
    START_DIR=`pwd`
    bootstrap_lfe
    bootstrap_lutil
    bootstrap_lcfg
    bootstrap_ltest
    cd $START_DIR
    (ERL_LIBS=`get_bootstrap_erl_libs` \
    $BOOTSTRAP_LFE -eval '(lcfg:clone-deps)' +pc unicode)
    rebar get-deps
}

clean_test_name () {
    egrep -v '.*\.erl$' | sed -e 's/.beam//' -e 's/^.eunit\///'
}

quote_test () {
    awk '{print "\x27" $1 "\x27"}'
}

strip_newlines () {
    tr '\n' ','|sed 's/,$//'
}

all_but_last_line () {
    awk 'NR>1{print buf}{buf = $0}'
}

get_unit_tests () {
    ERL_LIBS=`get_erl_libs` erl -eval "io:format(\"~p\", [ltest:'get-unit-beams'()])" -noshell -s erlang halt|tr -d "\n[] "|tr \" \'|sed -e 's|\(\./\)*\.eunit/||g'
}

get_integration_tests () {
    ERL_LIBS=`get_erl_libs` erl -eval "io:format(\"~p\", [ltest:'get-integration-beams'()])" -noshell -s erlang halt|tr -d "\n[] "|tr \" \'|sed -e 's|\(\./\)*\.eunit/||g'
}

get_system_tests () {
    ERL_LIBS=`get_erl_libs` erl -eval "io:format(\"~p\", [ltest:'get-system-beams'()])" -noshell -s erlang halt|tr -d "\n[] "|tr \" \'|sed -e 's|\(\./\)*\.eunit/||g'
}

clean_test_results () {
    # get rid of the redundant module prefixing for each line ...
    sed "s/  .*-tests:/ /" | \
    sed "s/ (module '.*')/ /" | \
    # get rid of the eunit/erlang-only '_test' and '_test_' suffixes
    sed "s/_test\.\.\./ ... /" | \
    sed "s/_test_\.\.\./ ... /" | \
    # make sure there's a space before the elipses
    sed "s/\(.*[^ ]\)\.\.\./\1 ... /" | \
    # go crazy... replace all unders with dashes
    sed "s/_/-/g"
}

format_test_result_line () {
    line="$1"
    #pad=`printf '%0.1s' "."{1..60}`
    pad="............................................................"  # 60 dots
    padlen=54
    dots=""
    len=0

    case $line in
        *failed*)
            preadjustedlen=`echo "$line" | wc -m | tr -d ' '`
            len=`$expr_cmd $padlen - $preadjustedlen + 5`
            ;;
        *)
            preadjustedlen=`echo "$line" | wc -m | tr -d ' '`
            len=`$expr_cmd $padlen - $preadjustedlen + 3`
            ;;
    esac
    if [ "$len" -gt 0 ]; then
        dots=`printf '%*.*s ' 0 $len "$pad"`
        # the following doesn't work on Mac OS X; BSD expr is used, not GNU
        #dots=`$expr_cmd substr "$pad" 1 $len`
    fi
    echo "$line" | sed "s/\.\.\. /$dots/"
}

format_test_results () {
    IFS=$'\n'
    input=`cat`
    for line in $input; do
        format_test_result_line "$line"
    done
}

colorize_test_results () {
    # color the successes
    sed "s/ok$/\[\\${BOLD_GREEN}ok\\${END_COLOR}\]/g" | \
    sed "s/\(Passed: .*\.\)/\\${BOLD_GREEN}\1\\${END_COLOR}/" | \
    sed "s/\(All .* passed\.\)/\\${BOLD_GREEN}\1\\${END_COLOR}/" | \
    # color warnings and the like
    sed "s/There were no tests to run\./\\${YELLOW}There were no tests of this type to run\.\\${END_COLOR}/" | \
    sed "s/\(Skipped: .*\.\)/\\${YELLOW}\1\\${END_COLOR}/" | \
    sed "s/\(One or more tests were cancelled\.\)/\\${MAGENTA}\1\\${END_COLOR}/" | \
    sed "s/\(\*unexpected termination of test process\*\)/\\${MAGENTA}\1\\${END_COLOR}/" | \
    # color failures
    sed "s/\*failed\*$/\[\\${RED}failed\\${END_COLOR}\]/g" | \
    sed "s/\(Failed: .*\.\)/\\${RED}\1\\${END_COLOR}/" | \
    sed "s/\(Error in process .*\)/\\${RED}\1\\${END_COLOR}/" | \
    sed "s/\(\*\*error:.*\)/\\${BOLD_RED}\1\\${END_COLOR}/" | \
    sed "s/\(                     \)\({.*\)/\\${BOLD_RED}          \2\\${END_COLOR}/" | \
    # color the timings
    sed "s/\(.*\)\(\[[0-9].* s\]\)\(.*\)/\1\\${BOLD_BLACK}\2\\${END_COLOR}\3/" | \
    sed "s/\(.*\)\(\[done in \(.* s\)\]\)\(.*\)/\1\\${BOLD_BLACK}Total module test time: \3\\${END_COLOR}\4/"
}

parse_test_results () {
    clean_test_results | format_test_results | colorize_test_results
}

get_parsed () {
    result=$1

    echo "$result" | all_but_last_line | parse_test_results
}

build_tests () {
    echoe "${YELLOW}Removing old tests ...${END_COLOR}"
    echo "rm -rf $TEST_OUT_DIR"
    mkdir -p $TEST_OUT_DIR
    echo "mkdir: created directory $TEST_OUT_DIR"

    echoe "${YELLOW}Compiling tests ...${END_COLOR}"
    # compile actual test modules (unit, integration, system, etc.)
    #PATH=`get_path` ERL_LIBS=`get_erl_libs` \
    PATH="`get_path`" \
        lfec `construct_pa_ebin_option` -o $TEST_OUT_DIR $TEST_DIR/*.lfe && \
        echoe "${GREEN}Successfully compiled test modules." || \
        echoe "${RED}Could not compile one or more test modules."
        echoe "$END_COLOR"
}

only_run_unit_tests () {
    status=0
    echoe "$BOLD_BLUE"
    echo "------------------"
    echo "Running unit tests ..."
    echo "------------------"
    echoe "$END_COLOR"
    path=`get_path`
    erllibs=`get_erl_libs`
    unittests=`get_unit_tests`
    result=`PATH=$path ERL_LIBS=$erllibs \
        erl -pa ./.eunit -noshell \
        -eval "$CASE_OPEN $unittests $CASE_CLOSE"; echo $?`
    status=`echo "$result" | tail -1`
    parsed=`get_parsed "$result"`
    echoe "$parsed"
    return $status
}

run_unit_tests () {
    build_tests
    only_run_unit_tests
}

only_run_integration_tests () {
    status=0
    echoe "$BOLD_BLUE"
    echo "-------------------------"
    echo "Running integration tests ..."
    echo "-------------------------"
    echoe "$END_COLOR"
    path=`get_path`
    erllibs=`get_erl_libs`
    integrationtests=`get_integration_tests`
    result=`PATH=$path ERL_LIBS=$erllibs \
        erl -pa ./.eunit -noshell \
        -eval "$CASE_OPEN $integrationtests $CASE_CLOSE"; echo $?`
    status=`echo "$result" | tail -1`
    parsed=`get_parsed "$result"`
    echoe "$parsed"
    return $status
}

run_integration_tests () {
    build_tests
    only_run_integration_tests
}

only_run_system_tests () {
    status=0
    echoe "$BOLD_BLUE"
    echo "--------------------"
    echo "Running system tests ..."
    echo "--------------------"
    echoe "$END_COLOR"
    path=`get_path`
    erllibs=`get_erl_libs`
    systemtests=`get_system_tests`
    result=`PATH=$path ERL_LIBS=$erllibs \
        erl -pa ./.eunit -noshell \
        -eval "$CASE_OPEN $systemtests $CASE_CLOSE"; echo $?`
    status=`echo "$result" | tail -1`
    parsed=`get_parsed "$result"`
    echoe "$parsed"
    return $status
}

run_system_tests () {
    build_tests
    only_run_system_tests
}

run_all_tests () {
    status=0
    build_tests
    only_run_unit_tests || status=$?
    only_run_integration_tests || status=$?
    only_run_system_tests || status=$?
    return $status
}

clean_tests () {
    echo "Removing EUnit test files ..."
    rm $TEST_OUT_DIR/*.beam && echo "removed $TEST_OUT_DIR/*.beam"
}

create_dirs () {
    project=$1
    mkdir -p $project/resources/make
    mkdir -p $project/src
    mkdir -p $project/test
}

create_yaws_dirs () {
    project=$1
    mkdir -p $project/www
    mkdir $project/etc $project/logs
}

create_yaws_bootstrap_dirs () {
    project=$1
    mkdir -p $project/www/css
    mkdir $project/www/images $project/www/js $project/www/icons $project/www/fonts
}

add_git_files () {
    git init && git add * .gitignore .travis.yml
}

create_file () {
    data=$1
    filename=$2
    mypattern=$3  # optional argument
    myproject=$4  # optional argument
    if [ x"$mypattern" = x ]; then
        mypattern="{{IGNORE}}"
        myproject="{{IGNORE}}"
    fi
    echo $data | decode | LC_CTYPE=C LANG=C sed \
        "s#$mypattern#$myproject#g" > $filename
}

create_project_files () {
    project=$1
    create_file "$gitignore" $project/.gitignore
    create_file "$rebarconfig" $project/rebar.config
    create_file "$commonmk" $project/resources/make/common.mk {{PROJECT}} $project
    create_file "$travisci" $project/.travis.yml {{PROJECT}} $project
    create_file "$readme" $project/README.md {{PROJECT}} $project
}

create_library_files () {
    project=$1
    create_file "$libmakefile" $project/Makefile {{PROJECT}} $project
    create_file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create_file "$libtestmodule" \
        $project/test/unit-${project}-tests.lfe {{PROJECT}} $project
    create_file "$libmodule" $project/src/$project.lfe {{PROJECT}} $project
    create_file "$libutilmodule" \
        $project/src/$project-util.lfe {{PROJECT}} $project
}

create_service_files () {
    project=$1
    create_file "$otpmk" $project/resources/make/otp.mk {{PROJECT}} $project
    create_file "$svcmakefile" $project/Makefile {{PROJECT}} $project
    create_file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create_file "$svctestmodule" \
        $project/test/unit-${project}-tests.lfe {{PROJECT}} $project
    create_file "$svcapp" \
        $project/src/${project}-app.lfe {{PROJECT}} $project
    create_file "$svcserver" \
        $project/src/${project}-server.lfe {{PROJECT}} $project
    create_file "$svcsup" \
        $project/src/${project}-sup.lfe {{PROJECT}} $project
    create_file "$libutilmodule" \
        $project/src/$project-util.lfe {{PROJECT}} $project
}

create_e2_service_files () {
    project=$1
    create_file "$e2mk" $project/resources/make/e2.mk {{PROJECT}} $project
    create_file "$e2makefile" $project/Makefile {{PROJECT}} $project
    create_file "$e2rebar" $project/rebar.config
    create_file "$e2appsrc" $project/src/$project.app.src {{PROJECT}} $project
    create_file "$e2testmodule" \
        $project/test/unit-${project}-tests.lfe {{PROJECT}} $project
    create_file "$e2app" \
        $project/src/${project}-app.lfe {{PROJECT}} $project
    create_file "$e2server" \
        $project/src/${project}-server.lfe {{PROJECT}} $project
    create_file "$libutilmodule" \
        $project/src/$project-util.lfe {{PROJECT}} $project
}

create_yaws_files () {
    project=$1
    create_file "$yawsmk" $project/resources/make/yaws.mk {{PROJECT}} $project
    create_file "$yawsmakefile" $project/Makefile {{PROJECT}} $project
    create_file "$yawsrebar" $project/rebar.config
    create_file "$yawsconf" $project/etc/yaws.conf {{PROJECT}} $project
    create_file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create_file "$yawsmodule" $project/src/${project}.lfe {{PROJECT}} $project
    create_file "$yawsroutesmodule" \
        $project/src/${project}-routes.lfe  {{PROJECT}} $project
    create_file "$yawscontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create_file "$yawsutilmodule" \
        $project/src/${project}-util.lfe    {{PROJECT}} $project
    create_file "$libtestmodule" \
        $project/test/unit-${project}-tests.lfe {{PROJECT}} $project
    create_file "$libutilmodule" \
        $project/src/$project-util.lfe {{PROJECT}} $project
}

create_yaws_bootstrap_files () {
    project=$1
    create_file "$yawsbootstrapcontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create_file "$yawsbootstrapnavmodule" \
        $project/src/${project}-nav.lfe {{PROJECT}} $project
    create_file "$yawsbootstraproutesmodule" \
        $project/src/${project}-routes.lfe {{PROJECT}} $project
    create_file "$yawsbootstrapcss" $project/www/css/bootstrap.css
    create_file "$yawsbootstrapcssmin" $project/www/css/bootstrap-min.css
    create_file "$yawsbootstrapslatecss" $project/www/css/bootstrap-slate.css
    create_file "$yawsbootstrapslatecssmin" \
        $project/www/css/bootstrap-slate-min.css
    create_file "$yawsbootstrapjs" $project/www/js/bootstrap.js
    create_file "$yawsbootstrapcssmin" $project/www/css/bootstrap-min.css
    create_file "$yawsbootstrapjs" $project/www/js/bootstrap.js
    create_file "$yawsbootstrapjsmin" $project/www/js/bootstrap-min.js
    create_file "$yawsbootstrapfonteot" \
        $project/www/fonts/glyphicons-halflings-regular.eot
    create_file "$yawsbootstrapfontsvg" \
        $project/www/fonts/glyphicons-halflings-regular.svg
    create_file "$yawsbootstrapfontttf" \
        $project/www/fonts/glyphicons-halflings-regular.ttf
    create_file "$yawsbootstrapfontwoff" \
        $project/www/fonts/glyphicons-halflings-regular.woff
}

create_presentation_files () {
    project=$1
    create_file "$presrebar" $project/rebar.config
    create_file "$presyawsconf" $project/etc/yaws.conf {{PROJECT}} $project
    create_file "$presmodule" $project/src/${project}.lfe {{PROJECT}} $project
    create_file "$prescontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create_file "$presslidesmodule" \
        $project/src/${project}-slides.lfe {{PROJECT}} $project

    # get a stable copy of Reveal.js
    version="2.6.2"
    file="${version}.zip"
    dir="reveal.js-${version}"
    url="https://github.com/hakimel/reveal.js/archive/$file"
    cd $project/www > /dev/null 2>&1 && \
    download_file $url && \
    unzip $file > /dev/null 2>&1 && \
    mv $dir/css $dir/js $dir/lib $dir/plugin . && \
    rm -rf $file $dir && \
    cd - > /dev/null 2>&1
}

post_create_presentation () {
    project=$1
    cd $project && add_git_files && mkdir -p deps && \
        make get-deps > /dev/null 2>&1 && \
    cd - > /dev/null 2>&1 && \
    cd $project/deps/reveal-js > /dev/null 2>&1 && ln -s ../../deps . && \
    cd - > /dev/null 2>&1 && \
    cd $project && \
    cp -v deps/reveal-js/resources/public/js/config.js www/js/ && \
    cp -vr \
        deps/reveal-js/resources/public/images \
        deps/reveal-js/resources/public/icons \
        www/ && \
    make check-all-with-deps && \
    cd - > /dev/null 2>&1
}

post_create () {
    project=$1
    cd $project && add_git_files && mkdir -p deps && make check-all-with-deps
}

setup_script_project () {
    script=$1
    create_file "$scriptfile" $script
    chmod 755 $script
}

setup_library_project () {
    project=$1
    echo "Setting up starter library project $project ..."
    create_dirs $project
    create_project_files $project
    create_library_files $project
    post_create $project
}

setup_service_project () {
    project=$1
    echo "Setting up starter OTP service project $project ..."
    create_dirs $project
    create_project_files $project
    create_service_files $project
    post_create $project
}

setup_e2_service_project () {
    project=$1
    echo "Setting up starter e2 service project $project ..."
    create_dirs $project
    create_project_files $project
    create_e2_service_files $project
    post_create $project

}

setup_yaws_project () {
    project=$1
    echo "Setting up default starter YAWS project $project ..."
    create_dirs $project
    create_yaws_dirs $project
    create_project_files $project
    create_yaws_files $project
    post_create $project
}

setup_yaws_bootstrap_project () {
    project=$1
    echo "Setting up Bootstrap starter YAWS project $project ..."
    create_dirs $project
    create_yaws_dirs $project
    create_yaws_bootstrap_dirs $project
    create_project_files $project
    create_yaws_files $project
    create_yaws_bootstrap_files $project
    post_create $project
}

setup_presentation_project () {
    project=$1
    echo "Setting up presentation starter project $project ..."
    create_dirs $project
    create_yaws_dirs $project
    create_project_files $project
    create_yaws_files $project
    create_presentation_files $project
    post_create_presentation $project
}

create_new_yaws () {
    command=$1
    subcommand=$2
    arg=$3
    case $subcommand in
        default)
            setup_yaws_project $arg
            ;;
        bootstrap)
            setup_yaws_bootstrap_project $arg
            ;;
        simple)
            setup_yaws_simple_project $arg
            ;;
        *)
            unknown_subcommand_error "$command $subcommand"
            ;;
    esac
}

create_new_presentation () {
    arg=$1
    setup_presentation_project $arg
}

create_new () {
    context=$1
    arg1=$2
    arg2=$3
    case $context in
        script)
            setup_script_project $arg1
            ;;
        library)
            setup_library_project $arg1
            ;;
        service)
            setup_service_project $arg1
            ;;
        e2service)
            setup_e2_service_project $arg1
            ;;
        yaws)
            # check if arg2 is empty string; if so, assume no subcommand was
            # passed and use the default subcommand
            if [ x"$arg2" = x ]; then
                arg2=$arg1
                arg1="default"
            fi
            create_new_yaws $context $arg1 $arg2
            ;;
        presentation)
            # create a yaws project
            create_new_presentation $arg1
            # now add the presentation-specific code to it
            # overwrite rebar.config
            # download Reveal.js into www
            # create a PROJ-yaws.lfe with out/1 defined
            # create a content module which calls the chapters
            # create a slides module which defines the chapters
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

do_install () {
    script=$1
    context=$2
    arg1=$3
    arg2=$4
    # the default option is to install lfetool itself
    if [ x"$context" = x ]; then
        context="lfetool"
    fi
    case $context in
        lfetool)
            install_lfetool $script $arg1
            ;;
        lfe)
            install_lfe
            ;;
        erlang)
            install_erlang $arg1 $arg2
            ;;
        kerl)
            install_kerl $arg1
            ;;
        rebar)
            install_rebar $arg1
            ;;
        relx)
            install_relx $arg1
            ;;
        mix)
            install_mix $arg1
            ;;
        erjang)
            install_erjang $arg1
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

do_update () {
    script=$1
    context=$2
    if [ x"$context" = x ]; then
        context="lfetool"
    fi
    case $context in
        lfetool)
            update_lfetool $script
            ;;
        deps)
            update_deps
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

do_tests () {
    context=$1
    case $context in
        unit)
            run_unit_tests
            ;;
        integration)
            run_integration_tests
            ;;
        system)
            run_system_tests
            ;;
        all)
            run_all_tests
            ;;
        build)
            build_tests
            ;;
        show_unit)
            get_unit_tests
            ;;
        show_integration)
            get_integration_tests
            ;;
        show_system)
            get_system_tests
            ;;
        clean)
            clean_tests
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

do_lfe_repl () {
    case $OS_TYPE in
        Cygwin|Windows)
            PATH="`get_path`" erl `construct_pa_ebin_option` -noshell -s lfe_shell start
            ;;
        *)
            command="PATH=\"`get_path`\" ERL_LIBS=`get_erl_libs` lfe $@"
            #echo "$command"
            eval "$command"
            ;;
    esac
}

do_erlang_repl () {
    case $OS_TYPE in
        Cygwin|Windows)
            PATH="`get_path`" werl `construct_pa_ebin_option` &
            ;;
        *)
            eval "PATH=\"`get_path`\" ERL_LIBS=`get_erl_libs` erl $@"
            ;;
    esac
}

do_jerl_repl () {
    readline="rlwrap --command=jerl --prompt-colour=YELLOW --histsize=100000 --remember"
    eval "PATH=\"`get_path`\" ERL_LIBS=`get_erl_libs` $readline jerl $@"
}

do_jlfe_repl () {
    readline="rlwrap --command=jlfe --prompt-colour=YELLOW --histsize=100000 --remember"
    eval "PATH=\"`get_path`\" ERL_LIBS=`get_erl_libs` $readline jerl -noshell -s lfe_shell $@"
}

do_repl () {
    context=$1
    shift 1
    # the default option is to run the LFE REPL
    if [ x"$context" = x ]; then
        context="lfe"
    fi
    case $context in
        lfe)
            do_lfe_repl "$@"
            ;;
        erlang)
            do_erlang_repl "$@"
            ;;
        jerl)
            do_jerl_repl "$@"
            ;;
        jlfe)
            do_jlfe_repl "$@"
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

do_info () {
    context=$1
    case $context in
        version)
            get_versions
            ;;
        erllibs)
            get_erl_libs
            ;;
        installdir)
            get_erl_install_dir
            ;;
        bindir)
            get_erl_bin_dir
            ;;
        path)
            get_path
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

do_download () {
    context=$1
    case $context in
        deps)
            download_deps
            ;;
        *)
            unknown_context_error $context
            ;;
    esac
}

check_context () {
    context=$1

    if [ x"$context" = x ]; then
        missing_context_error
    fi
}

check_arg () {
    arg=$1
    if [ x"$arg" = x ]; then
        missing_arg_error
    fi
}

check_prerequisite () {
    if ! which erl >/dev/null 2>&1 ; then
        echo "Cannot find erl in PATH."
        exit 1
    fi

    case $OS_TYPE in
        Cygwin | Windows) rebar_exe="rebar.cmd" ;;
        *) rebar_exe=rebar   ;;
    esac

    if ! which $rebar_exe >/dev/null 2>&1 ; then
        echo "Cannot find $rebar_exe in PATH."
        exit 1
    fi
}

run () {
    if [ "$0" = "bash" ] || [ $0 = "sh" ] || [ $0 = "ksh" ]; then
        # this script is being executed by the wrapper
        script=$1
        version=$2
        command=$3
        context=$4
        arg1=$5
        arg2=$6
    else
        # this script is being executed directly
        script=$0
        command=$1
        context=$2
        arg1=$3
        arg2=$4
    fi

    case $command in
        -h|help)
            echo
            print_usage $script $version
            exit 0
            ;;
        -v|version)
            echo "$version"
            exit 0
            ;;
        -x)
            echo "Script has already been extracted."
            exit 1
            ;;
        extract)
            $script -x
            ;;
        install)
            do_install $script $context $arg1 $arg2
            ;;
        new)
            check_prerequisite
            check_context $context
            check_arg $arg1
            create_new $context $arg1 $arg2
            exit 0
            ;;
        update)
            do_update $script $context
            exit 0
            ;;
        tests)
            do_tests $context
            ;;
        repl)
            # the repl command only functions properly if lfetool is not run
            # from the compressed file, but is instead already uncompressed.
            # Not sure why; perhaps someone with serious Bash skills can
            # explain what's going on and provide a better way of doing this
            # than the work around below.
            if [ "$0" = "bash" ]; then
                echo
                eval "$script -x" > /dev/null 2>&1
                echo "In order to run the LFE REPL from this script, it has to"
                echo "be executed in its uncompressed form. For your convenience,"
                echo "the script has just been uncompressed. Please re-execute"
                echo "the same command to start the REPL."
            else
                # at this point in the script, $@ contains $command, $context
                # and any remaining args; only the remaining args should we pass
                # on to Erlang/the JVM
                if [ x"$context" = x ]; then
                    shift 1
                else
                    shift 2
                fi
                do_repl $context "$@"
            fi
            ;;
        info)
            do_info $context
            ;;
        download)
            do_download $context
            ;;
        *)
            unknown_command_error $command
            ;;
    esac
}

run "$@"
