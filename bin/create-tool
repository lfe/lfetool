#! /usr/bin/env bash
#set -x

version=0.3.5
tooltemplate="plugins/lfetool/templates/lfetool.tmpl"
compresstemplate="plugins/lfetool/templates/compressed.tmpl"
temp="lfetool-temp"
dest="lfetool"

OS_TYPE=Unix
case `uname -s` in
    CYGWIN_NT*)
        OS_TYPE=Cygwin
        ;;
    Windows_NT)
        OS_TYPE=Windows
        ;;
    SunOS)
        case `uname -r` in
            4*) OS_TYPE=SUNBSD ;;
            5*) OS_TYPE=SOLARIS ;;
        esac
        ;;
    Linux)
        OS_TYPE=LINUX
        ;;
    Darwin)
        OS_TYPE=Darwin  ## Apple OS X
        ;;
    OpenBSD)
        OS_TYPE=OpenBSD
        ;;
    AIX)
        OS_TYPE=AIX
        ;;
    HP-UX)
        OS_TYPE=HP-UX
        ;;
    OSF1)
        OS_TYPE=OSF1
        ;;

    *)
        ;;
esac

# load all the fillers from the plugins
for FILE in `ls plugins/*/filler.sh`; do
    . $FILE
done

# substitute template patterns with values
fill_tool_var () {
    local template=$1
    local pattern=$2
    if [ x"$pattern" = x ]; then
        pattern="{{NOOP}}"
    fi
    ###data=`cat "$template" | base64`
    # DEBUG
    #echo $template
    #echo $pattern
    #echo $data

    awk -F= -v tmpl=$template -v pat=$pattern -v OS=$OS_TYPE \
        '{if (index($2, pat) > 0) {
             printf("%s=\"", $1);
             if (OS == "Darwin") {
                 "base64 -b 0 < " tmpl | getline b64;
             } else {
		if (OS == "OpenBSD") {
		    "./bin/base64 < " tmpl | getline b64;
                } else {
		    "base64 -w 0 < " tmpl | getline b64;
		}
             }
             printf("%s\"\n", b64)
         } else { print } }' $dest > $temp

    #sed -e "s#$pattern#$data#g" $dest > $temp
    mv $temp $dest
}

add_license () {
    awk '{printf "# %s\n", $0}' LICENSE | sed -e 's/[ ]*$//g'
}

fill_templates () {
    cp $tooltemplate $dest
    fill_lfetool_files
    fill_common_files
    fill_script
    fill_library_files
    fill_service_files
    fill_yaws_files
    fill_yaws_bootstrap_files
    fill_presentation_files
    add_license > $temp
    cat $dest >> $temp
    mv $temp $dest
}

add_warning () {
    echo "# This is the compressed version of the lfetool script."
    echo "# This file is generated -- please to not edit directly."
}

compress_tool () {
    echo "#! /usr/bin/env bash" > $temp
    echo "#set -x" >> $temp
    echo >> $temp
    add_warning >> $temp
    echo >> $temp
    add_license >> $temp
    echo >> $temp

    echo version=$version >> $temp

    printf "lfetool=" >> $temp
    if [ $OS_TYPE = Darwin ]; then
        gzip --best --stdout $dest | base64 -b 0 >> $temp
    else
        if [ $OS_TYPE = OpenBSD ]; then
	    gzip --best --stdout $dest | ./bin/base64 -w 0 >> $temp
	else
	    gzip --best --stdout $dest | base64 -w 0 >> $temp
	fi
    fi
    #printf "\"\n" >> $temp

    echo >> $temp
    echo >> $temp

    cat << ENDSCRIPT  >> $temp
decode () {
    os=\`uname\`
    case \$os in
        Darwin)
            base64 -D
            ;;
        *)
            base64 -d
            ;;
    esac
}

uncompress () {
    echo \$lfetool | decode | gzip -d --stdout
}

add_warning () {
    echo "# This file is generated -- please to not edit directly."
    echo "# Instead, edit the following file and then re-generate"
    echo "# by running 'make build':"
    echo "#   plugins/lfetool/templates/lfetool.tmpl"
}

run () {
    script=\$0
    command=\$1
    case \$command in
        -x)
            echo
            echo "Extracting file ..."
            tmp=/tmp/\`date "+%Y%d%m%H%M%S_lfetool"\`
            echo "#! /usr/bin/env bash" > \$tmp
            echo "" >> \$tmp
	    add_warning >> \$tmp
            echo "" >> \$tmp
            echo "version=\$version" >> \$tmp
            echo "" >> \$tmp
            uncompress >> \$tmp
            chmod 755 \$tmp
            mv \$tmp \$script
            echo "Done."
            exit 0
            ;;
        extract)
            \$script -x
            ;;
        *)
            uncompress | bash -s -- \$script \$version \$@ \\
              && exit 0 \\
              || exit 1
            ;;
    esac
}

run \$@
ENDSCRIPT
    mv $temp $dest
}

run () {
    fill_templates
    compress_tool
    chmod 755 $dest
}

run
